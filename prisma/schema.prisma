generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model addresses {
  id            Int            @id(map: "addresses_pk") @default(autoincrement())
  street        String?        @db.VarChar(250)
  addressNumber String?        @db.VarChar(250)
  zipCode       String?        @db.VarChar(8)
  district      String?        @db.VarChar(50)
  cityId        Int
  cities        cities         @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "addresses_cities_fk")
  customers     customers[]
  institutions  institutions[]
}

model cities {
  id        Int         @id(map: "cities_pk") @default(autoincrement())
  name      String      @db.VarChar(250)
  state     states?
  addresses addresses[]
}

model customers {
  id                     Int                      @id(map: "customers_pk") @default(autoincrement())
  corporateName          String                   @db.VarChar(250)
  fantasyName            String?                  @db.VarChar(250)
  cnpj                   String?                  @db.VarChar(15)
  lastDateRead           DateTime?                @db.Timestamp(6)
  createdAt              DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt              DateTime?                @db.Timestamp(6)
  deletedAt              DateTime?                @db.Timestamp(6)
  mailboxId              Int
  addressId              Int?
  addresses              addresses?               @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customers_addresses_fk")
  mailboxes              mailboxes                @relation(fields: [mailboxId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customers_mailboxes_fk")
  institutions_customers institutions_customers[]
}

model institutions {
  id                     Int                      @id(map: "institutions_pk") @default(autoincrement())
  name                   String?                  @db.VarChar(250)
  mailboxId              Int
  addressId              Int?
  addresses              addresses?               @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institutions_addresses_fk")
  mailboxes              mailboxes                @relation(fields: [mailboxId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institutions_mailboxes_fk")
  institutions_customers institutions_customers[]
}

model institutions_customers {
  id            Int          @id(map: "institutions_customers_pk") @default(autoincrement())
  institutionId Int
  customerId    Int
  customers     customers    @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institutions_customers_customers_fk")
  institutions  institutions @relation(fields: [institutionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "institutions_customers_institutions_fk")
}

model mailboxes {
  id           Int            @id(map: "mailboxes_pk") @default(autoincrement())
  host         String         @db.VarChar(250)
  password     String         @db.VarChar(250)
  port         Int            @db.SmallInt
  email        String         @db.VarChar(250)
  lastDateRead Int?
  createdAt    DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt    DateTime?      @db.Timestamp(6)
  deletedAt    DateTime?      @db.Timestamp(6)
  customers    customers[]
  institutions institutions[]
}

enum states {
  AC
  AL
  AP
  AM
  BA
  CE
  ES
  GO
  MA
  MG
  MS
  MT
  PA
  PB
  PE
  PI
  PR
  RJ
  RN
  RS
  RO
  RR
  SC
  SE
  SP
  TO
  DF
}
